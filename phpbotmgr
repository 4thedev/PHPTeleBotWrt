#!/bin/bash
# PHPTeleBotWrt Manager (Installer, Updater, Uninstaller)
#--------------------------------------------------------
# Script by Helmi Amirudin <helmiau.com>
# If you use some codes frome here, please give credit to www.helmiau.com
#--------------------------------------------------------
SCRIPTNAME="$(basename "$0")"
INSDIR="/root/PHPTeleBotWrt" # Install directory
TLNAME="PHPTeleBotWrt"

# Installer command
if [[ $1 == "i" ]]; then
	# Check package and install requirements
	echo -e "Updating package repositories for $TLNAME..."
	# [ -f /var/lock/opkg.lock ] && rm -f /var/lock/opkg.lock
	
	oIns="opkg install"
	InsTxt="Installing"
	gbsPkg=$( opkg list-installed | grep -c "^git -\|^git-http -\|^bc -\|screen -" )
	p7Pkg=$( opkg list-installed | grep -c "^php7-cli -\|^php7-mod-curl -" )
	p8Pkg=$( opkg list-installed | grep -c "^php8-cli -\|^php8-mod-curl -" )
	
	# Checking if packages installed
	if [[ $gbsPkg -lt 4 ]] && [[ $p7Pkg -lt 2 || $p8Pkg -lt 2 ]]; then
		echo "All/some required packages is not installed correctly or something wrong, exiting manager..."
		opkg update
	fi

	# Try install git, git-http, bc, screen is not installed
	if [[ $gbsPkg -lt 4 ]]; then
		echo -e "Try to install git, git-http, bc, screen if not installed..." 
		pkgname="git"
		if [[ $(opkg list-installed | grep -c "^$pkgname -") == "0" ]]; then $oIns $pkgname; fi
		pkgname="git-http"
		if [[ $(opkg list-installed | grep -c "^$pkgname -") == "0" ]]; then $oIns $pkgname; fi
		pkgname="bc"
		if [[ $(opkg list-installed | grep -c "^$pkgname -") == "0" ]]; then $oIns $pkgname; fi
		pkgname="screen"
		if [[ $(opkg list-installed | grep -c "^$pkgname -") == "0" ]]; then $oIns $pkgname; fi
	else
		echo -e "Package: git, git-http, bc, screen already installed." 
	fi

	# Try install PHP if php8/php7 is not installed
	if [[ $(ls {/bin,/usr/bin,/usr/sbin} | grep -c "^php8-cli\|^php7-cli") -lt 1 ]] && [[ $(ls /usr/lib/php* | grep -c "^curl.so") -lt 1 ]]; then
		# install php7 if php8 is not available on the repo
		if [[ $(opkg list | grep -c "^php8-cli -") == 0 ]];then
			# Try install php7
			echo -e "Try to install php7 deps..." 
			pkgname="php7-cli"
			if [[ $(opkg list-installed | grep -c "^$pkgname -") == "0" ]]; then $oIns $pkgname; fi
			pkgname="php7-mod-curl"
			if [[ $(opkg list-installed | grep -c "^$pkgname -") == "0" ]]; then $oIns $pkgname; fi
		else
			# Try install php8
			echo -e "Try to install php8 deps..."
			pkgname="php8-cli"
			if [[ $(opkg list-installed | grep -c "^$pkgname -") == "0" ]]; then $oIns $pkgname; fi
			pkgname="php8-mod-curl"
			if [[ $(opkg list-installed | grep -c "^$pkgname -") == "0" ]]; then $oIns $pkgname; fi
		fi
	else
		echo -e "Package: PHP packages already installed." 
	fi
	
	# Rechecking all required packages
	if [[ $gbsPkg -lt 4 ]] && [[ $p7Pkg -lt 2 || $p8Pkg -lt 2 ]]; then
		echo "All/some required packages is not installed correctly or something wrong, exiting manager..."
		exit 1
	fi

	# Remove older version if available
	if [[ -d "$INSDIR" ]]; then
		echo -e "Old files of $TLNAME detected! removing..."
		[ -e "$INSDIR"/databot ] && mv "$INSDIR"/databot "$INSDIR"-databot.bak
		rm -rf "$INSDIR"
	fi

	# Cloning repo
	echo -e "Downloading $TLNAME files..."
	git clone https://github.com/helmiau/PHPTeleBotWrt "$INSDIR"
	
	if [ $? -eq 0 ]; then
		echo -e "$TLNAME downloaded successfully."
	else
		echo -e "Error downloading $TLNAME binaries, exiting manager..."
		exit 1
	fi

	# Setting up permissions
	echo -e "Setting up $TLNAME file permissions..."
	chmod 0755 -R "$INSDIR"/*
	
	# Restore databot backup if available
	if [[ -e "$INSDIR"-databot.bak ]]; then
		echo -e "Backup found! Restoring $TLNAME databot backup..."
		mv "$INSDIR"-databot.bak "$INSDIR"/databot
	else
		echo -e "Bot Token Example: 52123745:ABeN1H9jc0I_7lIeyu_4aE8BZiV_fXt9TGk"
		echo -e "üí¨ Enter Your Bot Token: "
		echo -n "==>> "
		read -r btoken
		echo -e "Bot Username Example: mamanxwrt_bot"
		echo -e "ü§ñ Enter Your Bot Username (without @): "
		echo -n "==>> "
		read -r buser
		echo -e "Personal Account UID Example: 234321234"
		echo -e "ü§ñ Enter Your Personal Account UID: "
		echo -n "==>> "
		read -r userid

		echo -e "\nüî® Editing $TLNAME telegram data with your Bot Token & Bot Username..."
		echo -e "$btoken" > "$INSDIR"/databot
		echo -e "$buser" >> "$INSDIR"/databot
		echo -e "$userid" >> "$INSDIR"/databot

		echo -e "‚úîÔ∏è $TLNAME telegram data was edited successfully."
	fi

	# Auto start on boot command (rc.local)
	if [[ -f "$INSDIR"/index.php ]] && ! grep -q "PHPTeleBotWrt" /etc/rc.local; then
		sed -i 's#exit 0##g' /etc/rc.local
		cat << 'EOF' >> /etc/rc.local
#PHPTeleBotWrt-Start
PTBWDIR="/root/PHPTeleBotWrt"
if [[ $(ls {/bin,/usr/bin,/usr/sbin} | grep -c "php8-cli") -gt 0 ]];then cd "$PTBWDIR" && nohup php8-cli index.php &>/dev/null &; else cd "$PTBWDIR" && nohup php7-cli index.php &>/dev/null &; fi
#PHPTeleBotWrt-End

exit 0
EOF
		echo -e "$TLNAME added to startup (rc.local).."
	fi

	# Add bot to Scheduled Tasks (cron) command
	if [[ -f "$INSDIR"/index.php ]] && ! grep -q "PHPTeleBotWrt" /etc/crontabs/root; then
		sed -i 's#exit 0##g' /etc/crontabs/root
		cat << 'EOF' >> /etc/crontabs/root
#PHPTeleBotWrt-Start
*/4 * * * * cd /root/PHPTeleBotWrt && php8-cli index.php
EOF
		echo -e "$TLNAME added to Scheduled Tasks (cron).."
	fi

	# Success notif
	successTxt="‚úîÔ∏è $TLNAME installed successfully! Restart your device or you can wait for 5 mins until this software run automatically!."
	echo -e "$successTxt"

	# Send message to Bot for testing
	botTknTst=$(sed -n '1p' "$INSDIR"/databot)
	botUsrTst=$(sed -n '2p' "$INSDIR"/databot)
	AccUID=$(sed -n '3p' "$INSDIR"/databot)
	logF="PHPTeleBotWrt-CurlBotLog"
	curl -s -X POST "https://api.telegram.org/bot$botTknTst/sendMessage" -d chat_id="$AccUID" -d text="${successTxt}" > "$logF"
	if grep -q "error_code" "$logF"; then
		echo "But error occurs when sending message to bot:"
		cat "$logF"
		rm -f "$logF"
	else
		rm -f "$logF"
	fi


# Update command
elif [[ $1 == "u" ]]; then
	# Update CMD
	echo -e "Updating $TLNAME..."
	
	# Backup databot if available
	[ -e "$INSDIR"/databot ] && echo -e "$TLNAME databot detected! backing up..." && mv "$INSDIR"/databot "$INSDIR"-databot.bak

	cd "$INSDIR"
	git reset --hard
	git pull
	chmod 0755 -R "$INSDIR"/*

	# Restore databot if available
	[ -e "$INSDIR"-databot.bak ] && echo -e "Backup found! Restoring $TLNAME databot backup..." && mv "$INSDIR"-databot.bak "$INSDIR"/databot

# Remover/Uninstaller command
elif [[ $1 == "ra" ]] || [[ $1 == "rx" ]]; then
	if [[ -d "$INSDIR" ]] && [[ $1 == "ra" ]]; then
		echo -e "Uninstalling $TLNAME with all data..."
		rm -rf "$INSDIR"
		echo -e "$TLNAME uninstalled..."
	elif [[ -d "$INSDIR" ]] && [[ $1 == "rx" ]]; then
		echo -e "Uninstalling $TLNAME without data..."
		[ -e "$INSDIR"/databot ] && mv "$INSDIR"/databot "$INSDIR"-databot.bak
		rm -rf "$INSDIR"
		echo -e "$TLNAME uninstalled..."
	fi

# Edit databot command
elif [[ $1 == "e" ]]; then
	# Get older databot
	botTknTst=$(sed -n '1p' "$INSDIR"/databot)
	botUsrTst=$(sed -n '2p' "$INSDIR"/databot)
	AccUID=$(sed -n '3p' "$INSDIR"/databot)
	
	# Edit databot CMD
	echo -e "Editing $TLNAME databot..."
	echo -e "Bot Token Example: 52123745:ABeN1H9jc0I_7lIeyu_4aE8BZiV_fXt9TGk"
	echo -e "üí¨ Enter New Bot Token: (leave empty if no change)"
	echo -n "==>> "
	read -r newbtoken
	[[ ! -z $newbtoken ]] && sed -i "s#$botTknTst#$newbtoken#g" "$INSDIR"/databot
	echo -e "Bot Username Example: mamanxwrt_bot"
	echo -e "ü§ñ Enter New Bot Username (without @): (leave empty if no change)"
	echo -n "==>> "
	read -r newbuser
	[[ ! -z $newbuser ]] && sed -i "s#$botUsrTst#$newbuser#g" "$INSDIR"/databot
	echo -e "Personal Account UID Example: 234321234"
	echo -e "ü§ñ Enter Your New Personal Account UID: (leave empty if no change)"
	echo -n "==>> "
	read -r newuserid
	[[ ! -z $newuserid ]] && sed -i "s#$AccUID#$newuserid#g" "$INSDIR"/databot

	# Success notif
	successTxt="‚úîÔ∏è $TLNAME telegram data updated successfully."
	echo -e "$successTxt"
	
	# Get new databot
	unset botTknTst
	unset botUsrTst
	unset AccUID
	botTknTst=$(sed -n '1p' "$INSDIR"/databot)
	botUsrTst=$(sed -n '2p' "$INSDIR"/databot)
	AccUID=$(sed -n '3p' "$INSDIR"/databot)

	# Send message to Bot for testing
	logF="PHPTeleBotWrt-CurlBotLog"
	curl -s -X POST "https://api.telegram.org/bot$botTknTst/sendMessage" -d chat_id="$AccUID" -d text="${successTxt}" > "$logF"
	if grep -q "error_code" "$logF"; then
		echo "But error occurs when sending message to bot:"
		cat "$logF"
		rm -f "$logF"
	else
		rm -f "$logF"
	fi

# Runner/starter command
elif [[ $1 == "r" ]]; then
	# Run screen
	if [[ $(opkg list-installed | grep -c "^screen -") -gt 0 ]];then
		echo -e "Starting screen..."
		screen -S bot &>/dev/null &
	else
		echo -e "Pkg: screen is not available, exiting..."
		exit 1
	fi
	
	# Run php
	if [[ $(ls {/bin,/usr/bin,/usr/sbin} | grep -c "^php8-cli") -gt 0 ]];then
		echo -e "Starting $TLNAME with php8-cli."
		cd "$INSDIR" && nohup php8-cli index.php &>/dev/null &
	else
		echo -e "Starting $TLNAME with php7-cli."
		cd "$INSDIR" && nohup php7-cli index.php &>/dev/null &
	fi
	
	echo -e "‚úîÔ∏è $TLNAME started successfully."
	echo -e "Run [jobs] command to see $TLNAME process."

# Check status command
elif [[ $1 == "c" ]]; then
	# https://linuxconfig.org/how-to-kill-a-running-process-on-linux
	if [[ $(ps -a | grep "php7-cli\|php8-cli") -gt 0 ]]; then
		echo -e "‚úîÔ∏è $TLNAME is running with detail:"
		jobs -p
		# ps -a | grep "php7-cli\|php8-cli"
	else
		echo -e "‚úîÔ∏è $TLNAME is not running."
		exit 0
	fi

# Stopper command
elif [[ $1 == "s" ]]; then
	# Stop CMD
	
	# https://unix.stackexchange.com/questions/383497/how-to-kill-all-jobs-in-bash/383542#383542
	# pids=( $(jobs -p) )
	# [ -n "$pids" ] && kill -- "${pids[@]/#/-}"
	
	# https://linuxconfig.org/how-to-kill-a-running-process-on-linux
	if [[ $(ps -a | grep "php7-cli\|php8-cli") -gt 0 ]]; then
		kill $(ps -a | grep "php7-cli\|php8-cli")
		echo -e "‚úîÔ∏è $TLNAME stopped successfully."
		exit 0
	else
		echo -e "‚úîÔ∏è $TLNAME is not running."
		exit 0
	fi

# Auto start on boot command (rc.local)
elif [[ $1 == "a" ]]; then
	if [[ -f "$INSDIR"/index.php ]] && ! grep -q "PHPTeleBotWrt" /etc/rc.local; then
		sed -i 's#exit 0##g' /etc/rc.local
		cat << 'EOF' >> /etc/rc.local
#PHPTeleBotWrt-Start
PTBWDIR="/root/PHPTeleBotWrt"
if [[ $(ls {/bin,/usr/bin,/usr/sbin} | grep -c "^php8-cli") > 0 ]];then cd "$PTBWDIR" && nohup php8-cli index.php &>/dev/null &; else cd "$PTBWDIR" && nohup php7-cli index.php &>/dev/null &; fi
#PHPTeleBotWrt-End

exit 0
EOF
		echo -e "$TLNAME added to startup (rc.local).."
	else
		sed -i -e '/PHPTeleBotWrt-Start/,+4d' /etc/rc.local
		echo -e "$TLNAME removed from startup (rc.local).."
	fi

# Add bot to Scheduled Tasks (cron) command
elif [[ $1 == "t" ]]; then
	if [[ -f "$INSDIR"/index.php ]] && ! grep -q "PHPTeleBotWrt" /etc/crontabs/root; then
		sed -i 's#exit 0##g' /etc/crontabs/root
		cat << 'EOF' >> /etc/crontabs/root
#PHPTeleBotWrt-Start
*/4 * * * * cd /root/PHPTeleBotWrt && php8-cli index.php
EOF
		echo -e "$TLNAME added to Scheduled Tasks (cron).."
	else
		sed -i -e '/PHPTeleBotWrt-Start/,+1d' /etc/crontabs/root
		echo -e "$TLNAME removed from Scheduled Tasks (cron).."
	fi

# Auto start on boot command
else
	if grep -q "PHPTeleBotWrt" /etc/rc.local; then
		boot_stat="ACTIVATED"
	else
		boot_stat="NOT ACTIVE"
	fi
	
	if grep -q "PHPTeleBotWrt" /etc/crontabs/root; then
		cron_stat="ACTIVATED"
	else
        cron_stat="NOT ACTIVE"
    fi
	
	echo -e "$TLNAME Requirements:"
	echo -e " 1. Make your own bot from @BotFather."
	echo -e " 2. Copy your telegram bot token from @BotFather."
	echo -e " 2. Copy your telegram bot username from Bot profile."
	echo -e ""
	echo -e "üîÑ $TLNAME Manager Usage:"
	echo -e " $SCRIPTNAME i  : Install $TLNAME."
	echo -e " $SCRIPTNAME u  : Update $TLNAME."
	echo -e " $SCRIPTNAME ra : Remove/Uninstall $TLNAME with all data."
	echo -e " $SCRIPTNAME rx : Remove/Uninstall $TLNAME without data."
	echo -e " $SCRIPTNAME e  : Edit $TLNAME databot config."
	echo -e " $SCRIPTNAME r  : Run $TLNAME."
	echo -e " $SCRIPTNAME c  : Check $TLNAME running status."
	echo -e " $SCRIPTNAME s  : Stop $TLNAME."
	echo -e " $SCRIPTNAME a  : Auto Startup $TLNAME (rc.local) [$boot_stat]."
	echo -e " $SCRIPTNAME t  : $TLNAME Scheduled Tasks (cron) [$cron_stat]."
fi
